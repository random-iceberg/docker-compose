# https://docs.gitlab.com/ci/yaml

stages: # List of stages for jobs, and their order of execution
  - default
  - e2e

# Run health checks on that revision which is pinned in submodules
check-health:
  image: docker:cli
  stage: default
  services:
    - docker:dind
  before_script:
    - test ! -z $cicdtoken
    - git config --global url."https://gitlab-ci-token:${cicdtoken}@${CI_SERVER_HOST}/".insteadOf "https://${CI_SERVER_HOST}/"
    - git submodule update --init --recursive app model
  script:
    # Try to build the images
    - docker compose build --pull
    # Wait for health checks to pass
    - docker compose up --wait
    # Ok
    - docker compose down
    # And do the same for the dev configuration
    - docker compose -f ./compose/compose.dev.yaml build --pull
    - docker compose -f ./compose/compose.dev.yaml up --wait
    - docker compose -f ./compose/compose.dev.yaml down

  rules:
    - if: $CI_COMMIT_BRANCH

# TODO: actually run e2e tests
# Run e2e tests. Revision of each service container is the matching tag.
e2e-tests:
  image: docker:cli
  stage: e2e
  services:
    - docker:dind
  variables:
    IMAGE_GROUP: registry.mygit.th-deg.de/schober-teaching/student-projects/ain-23-software-engineering/ss-25/random_iceberg
    IMAGE_TAG: $CI_COMMIT_REF_SLUG
    COMPOSE: docker compose -f ./compose/compose.prod-registry.yaml
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$cicdtoken" $CI_REGISTRY
  script:
    - $COMPOSE pull
    - $COMPOSE up --wait
    - $COMPOSE down

  rules:
    - if: $CI_PIPELINE_SCHEDULE_DESCRIPTION && $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH
      variables:
        IMAGE_TAG: latest
    - if: $CI_PIPELINE_SCHEDULE_DESCRIPTION
